#!/bin/env python
# coding=utf-8
# CrackOneTimePad.py
# Author: Jiangmf
# Date: 2015-04-03
#
# Below are 7 ciphertexts, each of which was generated by encrypting some
# 31-character ASCII plaintext with the one-time pad using the same key (code
# for the encryption program used is given below). Decrypt them and recover
# all 7 plaintexts, each of which is a grammatically correct English sentence.
# Note: for this problem it is easiest to use a combination of automated
# analysis plus human insight and even occasional guessing. As long as you can
# decrypt them all, it doesn't matter how you do it.

import time
import re
ciphertexts = [x.decode('hex') for x in [
    'BB3A65F6F0034FA957F6A767699CE7FABA855AFB4F2B520AEAD612944A801E',
    'BA7F24F2A35357A05CB8A16762C5A6AAAC924AE6447F0608A3D11388569A1E',
    'A67261BBB30651BA5CF6BA297ED0E7B4E9894AA95E300247F0C0028F409A1E',
    'A57261F5F0004BA74CF4AA2979D9A6B7AC854DA95E305203EC8515954C9D0F',
    'BB3A70F3B91D48E84DF0AB702ECFEEB5BC8C5DA94C301E0BECD241954C831E',
    'A6726DE8F01A50E849EDBC6C7C9CF2B2A88E19FD423E0647ECCB04DD4C9D1E',
    'BC7570BBBF1D46E85AF9AA6C7A9CEFA9E9825CFD5E3A0047F7CD009305A71E']]

ciphertext2 = [x.decode('hex') for x in [
    '315c4eeaa8b5f8aaf9174145bf43e1784b8fa00dc71d885a804e5ee9fa40b16349c146'
    'fb778cdf2d3aff021dfff5b403b510d0d0455468aeb98622b137dae857553ccd8883a7'
    'bc37520e06e515d22c954eba5025b8cc57ee59418ce7dc6bc41556bdb36bbca3e87743'
    '01fbcaa3b83b220809560987815f65286764703de0f3d524400a19b159610b11ef3e',
    '234c02ecbbfbafa3ed18510abd11fa724fcda2018a1a8342cf064bbde548b12b07df44'
    'ba7191d9606ef4081ffde5ad46a5069d9f7f543bedb9c861bf29c7e205132eda9382b0'
    'bc2c5c4b45f919cf3a9f1cb74151f6d551f4480c82b2cb24cc5b028aa76eb7b4ab2417'
    '1ab3cdadb8356f',
    '32510ba9a7b2bba9b8005d43a304b5714cc0bb0c8a34884dd91304b8ad40b62b07df44'
    'ba6e9d8a2368e51d04e0e7b207b70b9b8261112bacb6c866a232dfe257527dc29398f5'
    'f3251a0d47e503c66e935de81230b59b7afb5f41afa8d661cb',
    '32510ba9aab2a8a4fd06414fb517b5605cc0aa0dc91a8908c2064ba8ad5ea06a029056'
    'f47a8ad3306ef5021eafe1ac01a81197847a5c68a1b78769a37bc8f4575432c198ccb4'
    'ef63590256e305cd3a9544ee4160ead45aef520489e7da7d835402bca670bda8eb7752'
    '00b8dabbba246b130f040d8ec6447e2c767f3d30ed81ea2e4c1404e1315a1010e7229b'
    'e6636aaa',
    '3f561ba9adb4b6ebec54424ba317b564418fac0dd35f8c08d31a1fe9e24fe56808c213'
    'f17c81d9607cee021dafe1e001b21ade877a5e68bea88d61b93ac5ee0d562e8e9582f5'
    'ef375f0a4ae20ed86e935de81230b59b73fb4302cd95d770c65b40aaa065f2a5e33a5a'
    '0bb5dcaba43722130f042f8ec85b7c2070',
    '32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd2061bbde24eb76a19d84a'
    'ba34d8de287be84d07e7e9a30ee714979c7e1123a8bd9822a33ecaf512472e8e8f8db3'
    'f9635c1949e640c621854eba0d79eccf52ff111284b4cc61d11902aebc66f2b2e43643'
    '4eacc0aba938220b084800c2ca4e693522643573b2c4ce35050b0cf774201f0fe52ac9'
    'f26d71b6cf61a711cc229f77ace7aa88a2f19983122b11be87a59c355d25f8e4',
    '32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd90f1fa6ea5ba47b01c909'
    'ba7696cf606ef40c04afe1ac0aa8148dd066592ded9f8774b529c7ea125d298e8883f5'
    'e9305f4b44f915cb2bd05af51373fd9b4af511039fa2d96f83414aaaf261bda2e97b17'
    '0fb5cce2a53e675c154c0d9681596934777e2275b381ce2e40582afe67650b13e72287'
    'ff2270abcf73bb028932836fbdecfecee0a3b894473c1bbeb6b4913a536ce4f9b13f1e'
    'fff71ea313c8661dd9a4ce',
    '315c4eeaa8b5f8bffd11155ea506b56041c6a00c8a08854dd21a4bbde54ce56801d943'
    'ba708b8a3574f40c00fff9e00fa1439fd0654327a3bfc860b92f89ee04132ecb9298f5'
    'fd2d5e4b45e40ecc3b9d59e9417df7c95bba410e9aa2ca24c5474da2f276baa3ac3259'
    '18b2daada43d6712150441c2e04f6565517f317da9d3',
    '271946f9bbb2aeadec111841a81abc300ecaa01bd8069d5cc91005e9fe4aad6e04d513'
    'e96d99de2569bc5e50eeeca709b50a8a987f4264edb6896fb537d0a716132ddc938fb0'
    'f836480e06ed0fcd6e9759f40462f9cf57f4564186a2c1778f1543efa270bda5e93342'
    '1cbe88a4a52222190f471e9bd15f652b653b7071aec59a2705081ffe72651d08f822c9'
    'ed6d76e48b63ab15d0208573a7eef027',
    '466d06ece998b7a2fb1d464fed2ced7641ddaa3cc31c9941cf110abbf409ed39598005'
    'b3399ccfafb61d0315fca0a314be138a9f32503bedac8067f03adbf3575c3b8edc9ba7'
    'f537530541ab0f9f3cd04ff50d66f1d559ba520e89a2cb2a83',
    '32510ba9babebbbefd001547a810e67149caee11d945cd7fc81a05e9f85aac650e9052'
    'ba6a8cd8257bf14d13e6f0a803b54fde9e77472dbff89d71b57bddef121336cb85ccb8'
    'f3315f4b52e301d16e9f52f904'
]]

# @see https://en.wikipedia.org/wiki/Letter_frequency
letterfreq = {
    'e': 12.70, 't': 9.06, 'a': 8.17, 'o': 7.51, 'i': 6.97, 'n': 6.75,
    's': 6.33, 'h': 6.09, 'r': 5.99, 'd': 4.25, 'l': 4.03, 'c': 2.78,
    'u': 2.76, 'm': 2.41, 'w': 2.36, 'f': 2.23, 'g': 2.02, 'y': 1.97,
    'p': 1.93, 'b': 1.29, 'v': 0.98, 'k': 0.77, 'j': 0.15, 'x': 0.15,
    'q': 0.10, 'z': 0.07}

# @see http://mdickens.me/typing/letter_frequency.html
punctuationfreq = {
    ',': 0.08, '.': 0.06, '-': 0.032, '\"': 0.031, '_': 0.03, '\'': 0.025,
    ')': 0.02,    '(': 0.02, ';': 0.01, '=': 0.005, ':': 0.004, '/': 0.003,
    '*': 0.003, '!': 0.002, '?': 0.001, '$': 0.001, '>': 0.001, '{': 0.001,
    '}': 0.001, '[': 0.001, ']': 0.001,    '\\': 0.001, '+': 0.001, '|': 0.001,
    '&': 0.001, '<': 0.001, '%': 0.001, '@': 0.001,    '#': 0.001, '^': 0.001,
    '`': 0.001, '~': 0.001}


class SymbolTable(object):

    def __init__(self, N=256):
        self._sTable = [0] * N

    def __getitem__(self, key):
        return self._sTable[ord(key)]

    def __setitem__(self, key, value):
        self._sTable[ord(key)] = value

    @staticmethod
    def positions(target, source):
        """Produce all positions of target in source"""
        pos = -1
        try:
            while True:
                pos = source.index(target, pos + 1)
                yield pos
        except ValueError:
            pass

    @staticmethod
    def weight(dec):
        """Return a reasonable weight for a given symbol"""
        if (dec == 0):  # \x00
            return 10
        elif (dec < 0x20):  # Non-visiable
            return 0
        elif (dec == 0x20):  # SPACE
            return 10
        elif(dec <= 0x2f):  # !"#$%&'()*+,-./
            return 1
        elif (dec <= 0x39):  # 0-9
            return 2
        elif (dec <= 0x40):  # :;<=>?@
            return 1
        elif (dec <= 0x5A):  # A-Z
            return 10
        elif (dec <= 0x60):  # [\]^_`
            return 1
        elif (dec <= 0x7A):  # a-z
            return 10
        elif (dec <= 0x7E):  # {|}~
            return 1
        else:
            return 0

    @staticmethod
    def weight2(symbol):
        """Return a reasonable weight for a given symbol"""
        if (re.match(r'[a-zA-Z \x00]', chr(symbol))):
            return 10
        elif(re.match(r'[0-9]', chr(symbol))):
            return 2
        elif(re.match(r'[:,.\'!?]', chr(symbol))):
            return 1
        else:
            return 0

    def symbol_dec(self):
        """Return a most possible symbols represented in integers"""
        target = max(self._sTable)
        return self.positions(target, self._sTable)
    pass


def strxor_lp(a, b):
    """xor two strings of different lengths, loop xor"""
    if len(a) < len(b):
        a, b = b, a
    if len(b) == 0:
        return a
    else:
        strlist = [chr(ord(a[i]) ^ ord(b[i % len(b)])) for i in range(len(a))]
        return "".join(strlist)


def strxor(a, b):
    """xor two strings of different lengths"""
    strlist = [chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b)]
    return "".join(strlist)


def crack(ctext):
    """crack ciphertexts generated using a Vigenere-like cipher"""
    # Step I -- Determing the key length
    length = find_length(ctext)
    # Step II -- Determing the ith byte of the key
    bytes = find_bytes(ctext, length)
    return bytes


def find_length(ctext):
    """find key length in [min,max]"""
    return min(len(c) for c in ctext)


def find_bytes(ctext, length):
    """find key bytes in given length"""
    key_set = []
    key = []
    # Guess key byte by byte, find possible keys
    for i in range(length):
        symbolProbability = SymbolTable()
        # Guess the key character b using the first character s0 in the stream
        for s0 in "abcdefghijklmnopqrstuvwxyz0123456789 :,.!?":
            b = ord(ctext[0][i]) ^ ord(s0)
            # Test b with the other characters in the stream
            xor_result = [ord(ctext[j][i]) ^ b for j in range(1, len(ctext))]
            # Calculate the locally weight under b
            symbolProbability[s0] = sum(
                SymbolTable.weight(s) for s in xor_result
            ) + SymbolTable.weight(ord(s0))
        key_set.append(set(syb ^ ord(ctext[0][i])
                           for syb in symbolProbability.symbol_dec()))
        key.append(chr(key_set[-1].pop()))

    # Check key byte by byte, using global distribution to make a decition
#    for i in range(length):
#        for j in len(ctext):
#            for k in key_set[i]:
#                s = k ^ ord(ctext[j][i])

    return "".join(key)
#

#

# Test Code
if __name__ == "__main__":
    t1 = time.time()
    secret = crack(ciphertexts)
    print "The key is:"
    print secret.encode('hex')
#   'f21a049bd07323c83998ce090ebc86dac9e039892a5f726783a561fd25ee30'

    print "The plaintext is:"
    for ciphertext in ciphertexts:
        print strxor(ciphertext, secret)

    t2 = time.time()
    print "time:", t2 - t1
