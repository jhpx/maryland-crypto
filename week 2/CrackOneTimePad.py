#!/bin/env python
# coding=utf-8
# CrackOneTimePad.py
# Author: Jiangmf
# Date: 2015-04-03
#
# Below are 7 ciphertexts, each of which was generated by encrypting some
# 31-character ASCII plaintext with the one-time pad using the same key (code
# for the encryption program used is given below). Decrypt them and recover
# all 7 plaintexts, each of which is a grammatically correct English sentence.
# Note: for this problem it is easiest to use a combination of automated
# analysis plus human insight and even occasional guessing. As long as you can
# decrypt them all, it doesn't matter how you do it.

import time
import re

ciphertexts = [x.decode('hex') for x in [
'BB3A65F6F0034FA957F6A767699CE7FABA855AFB4F2B520AEAD612944A801E',
'BA7F24F2A35357A05CB8A16762C5A6AAAC924AE6447F0608A3D11388569A1E',
'A67261BBB30651BA5CF6BA297ED0E7B4E9894AA95E300247F0C0028F409A1E',
'A57261F5F0004BA74CF4AA2979D9A6B7AC854DA95E305203EC8515954C9D0F',
'BB3A70F3B91D48E84DF0AB702ECFEEB5BC8C5DA94C301E0BECD241954C831E',
'A6726DE8F01A50E849EDBC6C7C9CF2B2A88E19FD423E0647ECCB04DD4C9D1E',
'BC7570BBBF1D46E85AF9AA6C7A9CEFA9E9825CFD5E3A0047F7CD009305A71E']]

# @see https://en.wikipedia.org/wiki/Letter_frequency
letterfreq = {
    'e': 12.70, 't': 9.06, 'a': 8.17, 'o': 7.51, 'i': 6.97, 'n': 6.75,
    's': 6.33, 'h': 6.09, 'r': 5.99, 'd': 4.25, 'l': 4.03, 'c': 2.78,
    'u': 2.76, 'm': 2.41, 'w': 2.36, 'f': 2.23, 'g': 2.02, 'y': 1.97,
    'p': 1.93, 'b': 1.29, 'v': 0.98, 'k': 0.77, 'j': 0.15, 'x': 0.15,
    'q': 0.10, 'z': 0.07}

# @see http://mdickens.me/typing/letter_frequency.html
punctuationfreq = {
',':0.08, '.':0.06, '-':0.032, '\"':0.031, '_':0.03, '\'':0.025, ')':0.02,
'(':0.02, ';':0.01, '=':0.005, ':':0.004, '/':0.003, '*':0.003, '!':0.002,
'?':0.001, '$':0.001, '>':0.001, '{':0.001, '}':0.001, '[':0.001, ']':0.001,
'\\':0.001, '+':0.001, '|':0.001, '&':0.001, '<':0.001, '%':0.001, '@':0.001,
'#':0.001, '^':0.001, '`':0.001, '~':0.001}

class SymbolTable(object):

    def __init__(self, N=256):
        self._sTable = [0] * N

    def __getitem__(self, key):
        return self._sTable[ord(key)]

    def __setitem__(self, key, value):
        self._sTable[ord(key)] = value

    @staticmethod
    def positions(target, source):
        """Produce all positions of target in source"""
        pos = -1
        try:
            while True:
                pos = source.index(target, pos + 1)
                yield pos
        except ValueError:
            pass

    @staticmethod
    def weight(symbol):
        """Return a reasonable weight for a given symbol"""
        if (re.match(r'[a-zA-Z \x00]', symbol)):
            return 10
        elif(re.match(r'[0-9]', symbol)):
            return 2
        elif(re.match(r'[:,.\'!?]', symbol)):
            return 1
        else:
            return 0

    def symbol(self):
        target = max(self._sTable)
        symbols = [chr(i) for i in self.positions(target, self._sTable)]
        if len(symbols) == 1:
            return symbols[0]
        else:
            return '('+'|'.join(symbols)+')'
    pass

def strxor_lp(a, b):
    """xor two strings of different lengths, loop xor"""
    if len(a) < len(b):
        a, b = b, a
    if len(b) == 0:
        return a
    else:
        strlist = [chr(ord(a[i]) ^ ord(b[i % len(b)])) for i in range(len(a))]
        return "".join(strlist)

def crack(ctext):
    """crack ciphertexts generated using a Vigenere-like cipher"""
    # Step I -- Determing the key length
    length = find_length(ctext)
    # Step II -- Determing the ith byte of the key
    bytes = find_bytes(ctext, length)
    return bytes


def find_length(ctext):
    """find key length in [min,max]"""
    return min(len(c) for c in ctext)


def find_bytes(ctext, length):
    """find key bytes in given length"""
    key = ['\x00'] * length
    # Guess key byte by byte
    for i in range(length):
        symbolProbability = SymbolTable()
        # Guess the key character b using the first character s0 in the stream
        for s0 in "abcdefghijklmnopqrstuvwxyz0123456789 :,.!?":
            b = ord(ctext[0][i]) ^ ord(s0)
            # Test b with the other characters in the stream
            xor_result = [ord(ctext[j][i]) ^ b for j in range(1, len(ctext))]
            if all(ascii_valid(s_xor_b) for s_xor_b in xor_result):
                # Calculate the distribution under b
                symbolProbability[s0] =sum(SymbolTable.weight(s) for s in xor_result) + SymbolTable.weight(s0)

    return "".join(key)


def ascii_valid(ch):
    return ch >= 32 and ch <= 127

# Test Code
if __name__ == "__main__":
    t1 = time.time()
    secret = crack(ciphertexts)
    print "The key is:"
    print secret.encode('hex')
    print "The plaintext is:"
    for ciphertext in ciphertexts:
        print strxor_lp(ciphertext, secret)

    t2 = time.time()
    print "time:", t2 - t1
